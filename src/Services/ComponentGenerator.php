<?php

namespace jcnghm\ApiScout\Services;

use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use jcnghm\ApiScout\ApiScoutResult;

class ComponentGenerator
{
    protected array $config;

    public function __construct(array $config)
    {
        $this->config = $config['components'] ?? [];
    }

    /**
     * Generate components for an API result
     */
    public function generate(ApiScoutResult $result, array $options = []): bool
    {
        $options = array_merge($this->config, $options);
        $success = true;

        if ($options['generate_blade'] ?? true) {
            $success = $this->generateBladeComponent($result, $options) && $success;
        }

        if ($options['generate_livewire'] ?? true) {
            $success = $this->generateLivewireComponent($result, $options) && $success;
        }

        return $success;
    }

    /**
     * Generate a Blade component
     */
    protected function generateBladeComponent(ApiScoutResult $result, array $options): bool
    {
        $componentName = Str::studly($result->getEndpointKey());
        $viewPath = base_path($options['view_path'] ?? 'resources/views/api-scout');
        $fileName = Str::kebab($result->getEndpointKey()) . '.blade.php';

        if (!File::isDirectory($viewPath)) {
            File::makeDirectory($viewPath, 0755, true);
        }

        $content = $this->generateBladeTemplate($result);

        return File::put($viewPath . '/' . $fileName, $content) !== false;
    }

    /**
     * Generate a Livewire component
     */
    protected function generateLivewireComponent(ApiScoutResult $result, array $options): bool
    {
        $componentName = Str::studly($result->getEndpointKey());
        $outputPath = base_path($options['output_path'] ?? 'app/Http/Livewire/ApiScout');
        $namespace = $options['namespace'] ?? 'App\\Http\\Livewire\\ApiScout';

        if (!File::isDirectory($outputPath)) {
            File::makeDirectory($outputPath, 0755, true);
        }

        // Generate PHP class
        $phpContent = $this->generateLivewireClass($result, $componentName, $namespace);
        $phpFile = $outputPath . '/' . $componentName . '.php';

        // Generate Blade view
        $viewContent = $this->generateLivewireView($result);
        $viewPath = resource_path('views/livewire/api-scout');
        
        if (!File::isDirectory($viewPath)) {
            File::makeDirectory($viewPath, 0755, true);
        }
        
        $viewFile = $viewPath . '/' . Str::kebab($result->getEndpointKey()) . '.blade.php';

        $phpSuccess = File::put($phpFile, $phpContent) !== false;
        $viewSuccess = File::put($viewFile, $viewContent) !== false;

        return $phpSuccess && $viewSuccess;
    }

    /**
     * Generate Blade template content
     */
    protected function generateBladeTemplate(ApiScoutResult $result): string
    {
        $fields = $result->getFields();
        $endpointKey = $result->getEndpointKey();
        
        $template = "{{-- Generated by ApiScout for {$endpointKey} endpoint --}}\n";
        $template .= "<div class=\"api-scout-component\">\n";
        $template .= "    <h3>" . Str::title(str_replace(['_', '-'], ' ', $endpointKey)) . "</h3>\n\n";

        if ($result->isArray()) {
            $template .= "    @if(!empty(\$data))\n";
            $template .= "        <div class=\"overflow-x-auto\">\n";
            $template .= "            <table class=\"min-w-full bg-white border border-gray-200\">\n";
            $template .= "                <thead>\n";
            $template .= "                    <tr class=\"bg-gray-100\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "                        <th class=\"px-4 py-2 border-b text-left\">" . Str::title(str_replace('_', ' ', $fieldName)) . "</th>\n";
            }

            $template .= "                    </tr>\n";
            $template .= "                </thead>\n";
            $template .= "                <tbody>\n";
            $template .= "                    @foreach(\$data as \$item)\n";
            $template .= "                        <tr class=\"hover:bg-gray-50\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "                            <td class=\"px-4 py-2 border-b\">{{ \$item['{$fieldName}'] ?? 'N/A' }}</td>\n";
            }

            $template .= "                        </tr>\n";
            $template .= "                    @endforeach\n";
            $template .= "                </tbody>\n";
            $template .= "            </table>\n";
            $template .= "        </div>\n";
            $template .= "    @else\n";
            $template .= "        <p class=\"text-gray-500\">No data available.</p>\n";
            $template .= "    @endif\n";
        } else {
            $template .= "    @if(!empty(\$data))\n";
            $template .= "        <div class=\"space-y-4\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "            <div class=\"flex justify-between\">\n";
                $template .= "                <span class=\"font-medium\">" . Str::title(str_replace('_', ' ', $fieldName)) . ":</span>\n";
                $template .= "                <span>{{ \$data['{$fieldName}'] ?? 'N/A' }}</span>\n";
                $template .= "            </div>\n";
            }

            $template .= "        </div>\n";
            $template .= "    @else\n";
            $template .= "        <p class=\"text-gray-500\">No data available.</p>\n";
            $template .= "    @endif\n";
        }

        $template .= "</div>\n";

        return $template;
    }

    /**
     * Generate Livewire component class
     */
    protected function generateLivewireClass(ApiScoutResult $result, string $componentName, string $namespace): string
    {
        $endpointKey = $result->getEndpointKey();
        
        $class = "<?php\n\n";
        $class .= "namespace {$namespace};\n\n";
        $class .= "use Livewire\\Component;\n";
        $class .= "use YourVendor\\ApiScout\\Facades\\ApiScout;\n\n";
        $class .= "class {$componentName} extends Component\n";
        $class .= "{\n";
        $class .= "    public \$data = [];\n";
        $class .= "    public \$loading = false;\n";
        $class .= "    public \$error = null;\n\n";
        $class .= "    public function mount()\n";
        $class .= "    {\n";
        $class .= "        \$this->loadData();\n";
        $class .= "    }\n\n";
        $class .= "    public function loadData()\n";
        $class .= "    {\n";
        $class .= "        \$this->loading = true;\n";
        $class .= "        \$this->error = null;\n\n";
        $class .= "        try {\n";
        $class .= "            \$result = ApiScout::analyze('{$endpointKey}');\n";
        $class .= "            \$this->data = \$result->getSampleData();\n";
        $class .= "        } catch (\\Exception \$e) {\n";
        $class .= "            \$this->error = \$e->getMessage();\n";
        $class .= "        }\n\n";
        $class .= "        \$this->loading = false;\n";
        $class .= "    }\n\n";
        $class .= "    public function refresh()\n";
        $class .= "    {\n";
        $class .= "        \$this->loadData();\n";
        $class .= "    }\n\n";
        $class .= "    public function render()\n";
        $class .= "    {\n";
        $class .= "        return view('livewire.api-scout." . Str::kebab($endpointKey) . "');\n";
        $class .= "    }\n";
        $class .= "}\n";

        return $class;
    }

    /**
     * Generate Livewire view content
     */
    protected function generateLivewireView(ApiScoutResult $result): string
    {
        $fields = $result->getFields();
        $endpointKey = $result->getEndpointKey();
        
        $template = "{{-- Generated Livewire component for {$endpointKey} --}}\n";
        $template .= "<div>\n";
        $template .= "    <div class=\"mb-4 flex justify-between items-center\">\n";
        $template .= "        <h3 class=\"text-lg font-semibold\">" . Str::title(str_replace(['_', '-'], ' ', $endpointKey)) . "</h3>\n";
        $template .= "        <button wire:click=\"refresh\" class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\">\n";
        $template .= "            @if(\$loading) Refreshing... @else Refresh @endif\n";
        $template .= "        </button>\n";
        $template .= "    </div>\n\n";
        
        $template .= "    @if(\$error)\n";
        $template .= "        <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n";
        $template .= "            <strong>Error:</strong> {{ \$error }}\n";
        $template .= "        </div>\n";
        $template .= "    @endif\n\n";
        
        $template .= "    @if(\$loading)\n";
        $template .= "        <div class=\"text-center py-8\">\n";
        $template .= "            <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n";
        $template .= "            <p class=\"mt-2 text-gray-600\">Loading data...</p>\n";
        $template .= "        </div>\n";
        $template .= "    @elseif(!empty(\$data))\n";

        if ($result->isArray()) {
            $template .= "        <div class=\"overflow-x-auto\">\n";
            $template .= "            <table class=\"min-w-full bg-white border border-gray-200 rounded-lg\">\n";
            $template .= "                <thead>\n";
            $template .= "                    <tr class=\"bg-gray-100\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "                        <th class=\"px-4 py-2 border-b text-left font-medium\">" . Str::title(str_replace('_', ' ', $fieldName)) . "</th>\n";
            }

            $template .= "                    </tr>\n";
            $template .= "                </thead>\n";
            $template .= "                <tbody>\n";
            $template .= "                    @foreach(\$data as \$item)\n";
            $template .= "                        <tr class=\"hover:bg-gray-50\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "                            <td class=\"px-4 py-2 border-b\">{{ \$item['{$fieldName}'] ?? 'N/A' }}</td>\n";
            }

            $template .= "                        </tr>\n";
            $template .= "                    @endforeach\n";
            $template .= "                </tbody>\n";
            $template .= "            </table>\n";
            $template .= "        </div>\n";
        } else {
            $template .= "        <div class=\"bg-white border border-gray-200 rounded-lg p-6\">\n";

            foreach ($fields as $fieldName => $field) {
                $template .= "            <div class=\"flex justify-between py-2 border-b border-gray-100 last:border-b-0\">\n";
                $template .= "                <span class=\"font-medium text-gray-700\">" . Str::title(str_replace('_', ' ', $fieldName)) . ":</span>\n";
                $template .= "                <span class=\"text-gray-900\">{{ \$data['{$fieldName}'] ?? 'N/A' }}</span>\n";
                $template .= "            </div>\n";
            }

            $template .= "        </div>\n";
        }

        $template .= "    @else\n";
        $template .= "        <div class=\"text-center py-8\">\n";
        $template .= "            <p class=\"text-gray-500\">No data available.</p>\n";
        $template .= "        </div>\n";
        $template .= "    @endif\n";
        $template .= "</div>\n";

        return $template;
    }
}